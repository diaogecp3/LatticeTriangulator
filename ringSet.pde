/******************************************************************************
 * Ring set processing.
 ******************************************************************************/


/*
 * TODO:
 *
 * 1. Use BFS to generate three-ring triangles.
 *    It is slower than naive method? Yes when n is small. No when n is large.
 *    How to make it fast? Combine BFS and heuristics, i.e. finding a good
      initial triangle.
 */


import java.util.Queue;

boolean debug3RT = false;
boolean debug3RTFix = false;
boolean debug2RT = false;
boolean fixPenetration = false;
boolean showCorridors = false;
int numFacesFastCH = 1;
int numStepsFastCH = 1;
int maxIterThreeRings = 100;
int maxIterOneRing = 100;


/*
 * Method for three-ring triangle generation.
 * 0: Naive method. Time: O(n^3). Space: O(1)
 * 1: Heuristic search. Time: O(n). Space: O(1)
 * 2: Breadth first search. Time: roughly O(min(3^d, n^3)) where d is the length
      from initial state to optimal state. Space: O(min(3^d, n^3)). Not converge?
 * 3: Breadth first search with heuristics. Time and space should be less than 2.
 */
int method3RT = 3;

/*
 * Method for triangle mesh generation for ring set.
 * 0: Generate a convex hull. Time: O(n^2)
 * 1: Generate a mesh using referenced convex hull. Time: O(r^2 + n)
 */
int methodTM = 1;


/*
 * RingSet class.
 *
 * A ring set is a set of rings (i.e. discritized cicles). We assume that these
 * rings lie on a sphere.
 */
class RingSet {
  class Debug3RTriInfo {  // debug info about three-ring-triangle generation
    int idr0, idr1, idr2;
    int idp0, idp1, idp2;
    int numSteps;
    int numFaces;
    Debug3RTriInfo() {
      idr0 = idr1 = idr2 = -1;
      idp0 = idp1 = idp2 = -1;
      numSteps = 0;
      numFaces = 0;
    }
  }

  class Debug2RTriInfo {
    pt pa0, pa1, pb0, pb1;
    int numGlobalStep = 1;
    int numLocalStep = 1;
  }

  class TriangleNode {
    Triangle tri;
    ArrayList<TriangleNode> children = null;
    TriangleNode(Triangle tri) {
      this.tri = tri;
    }

    boolean computeChildren(pt[][] rings, HashSet<Triangle> exploredSet) {
      assert rings.length == 3;
      int np = rings[0].length;
      pt[] ps = new pt[3];
      ps[0] = rings[0][tri.get(0)];
      ps[1] = rings[1][tri.get(1)];
      ps[2] = rings[2][tri.get(2)];
      vec normal = N(ps[0], ps[1], ps[2]);  // not necessarily unit vector
      boolean stable = true;
      pt p;
      vec v;
      children = new ArrayList<TriangleNode>();
      for (int r = 0; r < 3; ++r) {
        int[] idxs = new int[3];
        idxs[1] = tri.get((r + 1) % 3);
        idxs[2] = tri.get((r + 2) % 3);

        idxs[0] = (tri.get(r) - 1 + np) % np;
        p = rings[r][idxs[0]];
        v = V(ps[r], p);
        if (dot(normal, v) > 0) {
          if (stable == true) stable = false;
          Triangle tri = new Triangle(idxs[(3 - r) % 3], idxs[(4 - r) % 3], idxs[(5 - r) % 3]);
          if (!exploredSet.contains(tri)) {
            children.add(new TriangleNode(tri));
            exploredSet.add(tri);
          }
        }

        idxs[0] = (tri.get(r) + 1) % np;
        p = rings[r][idxs[0]];
        v = V(ps[r], p);
        if (dot(normal, v) > 0) {
          if (stable == true) stable = false;
          Triangle tri = new Triangle(idxs[(3 - r) % 3], idxs[(4 - r) % 3], idxs[(5 - r) % 3]);
          if (!exploredSet.contains(tri)) {
            children.add(new TriangleNode(tri));
            exploredSet.add(tri);
          }
        }
      }

      return stable;
    }
  }

  pt c;  // the center of the sphere where the ring set lies
  float r;  // the radius of the sphere where the ring set lies
  int nRings, nPointsPerRing;  // number of rings/circles, and number of points on each ring
  boolean sameRadius;  // whether all rings have the same radius
  pt[] contacts;  // the intersections between the outward normals of rings and the sphere
  float[] radii;  // the radii of rings
  vec[] initDirs;  // the initial directions, one for each ring, used to generate the first point on ring

  pt[][] points;  // the generated points on rings
  pt[] centers;  // the centers of rings, one for each ring

  ArrayList<Triangle> triangles = null;  // triangle mesh with ring vertices
  TriangleMesh refConvexHull = null; // convex hull generated by contacts
  ArrayList<Triangle> threeRingTriangles = null;
  ArrayList<Triangle> twoRingTriangles = null;
  ArrayList<ArrayList<Integer>> splitLists = null;

  Debug3RTriInfo debug3RTriInfo = new Debug3RTriInfo();  // for debug
  Debug2RTriInfo debug2RTriInfo = new Debug2RTriInfo();  // for debug

  RingSet(pt c, float r) {
    this.c = c;
    this.r = r;
    sameRadius = false;
  }

  RingSet(pt c, float r, int nc, int np) {
    this.c = c;
    this.r = r;
    this.nRings = nc;
    this.nPointsPerRing = np;
    sameRadius = false;
  }

  RingSet(pt c, float r, int nc, int np, float rMax) {
    this.c = c;
    this.r = r;
    this.nRings = nc;
    this.nPointsPerRing = np;
    sameRadius = true;
    radii = new float[1];
    radii[0] = rMax;
  }

  void init() {
    if (!sameRadius) {
      radii = new float[nRings];
      contacts = generateContactsAndRadii(c, r, nRings, radii);
    } else {
      contacts = generateContacts(c, r, nRings, radii[0]);
    }
    initDirs = generateInitDirs(c, contacts, nRings);
  }

  int getNumRings() {
    return nRings;
  }

  int getNumPointsPerRing() {
    return nPointsPerRing;
  }

  pt[] get1DPointArray() {
    if (points == null) return null;
    pt[] G = new pt[nRings * nPointsPerRing];
    int k = 0;
    for (int i = 0; i < nRings; ++i) {
      for (int j = 0; j < nPointsPerRing; ++j) {
        G[k++] = points[i][j];
      }
    }
    return G;
  }

  ArrayList<pt> get1DPointArrayList() {
    if (points == null) return null;
    ArrayList<pt> positions = new ArrayList<pt>();
    for (int i = 0; i < nRings; ++i) {
      for (int j = 0; j < nPointsPerRing; ++j) {
        positions.add(points[i][j]);
      }
    }
    return positions;
  }

  pt[][] get2DPointArray() {
    return points;
  }

  private pt getPoint(int id) {
    return points[id / nPointsPerRing][id % nPointsPerRing];
  }

  void generatePoints(float attenuation) {
    centers = new pt[nRings];
    if (!sameRadius) {
      float[] curRadii = new float[nRings];
      for (int i = 0; i < nRings; ++i) curRadii[i] = radii[i] * attenuation;
      points = generatePointsForCircles(contacts, curRadii, c, r, initDirs, nRings,
                                        nPointsPerRing, centers);
    } else {
      float curRadius = radii[0] * attenuation;
      points = generatePointsForCircles(contacts, curRadius, c, r, initDirs, nRings,
                                        nPointsPerRing, centers);
    }
  }



  void generateRefConvexHull() {
    assert contacts.length >= 3;
    ArrayList<Triangle> trianglesRefCH = generateConvexHull(contacts, nRings);
    refConvexHull = new TriangleMesh(contacts, trianglesRefCH);
    refConvexHull.setupSwingLists();  // for fixing penetration
  }

  /* This function has bugs? */
  private Triangle generateThreeRingTriangleNaive(pt[] points0,
                                                  pt[] points1,
                                                  pt[] points2) {
    int i = 0, j = 0, k = 0;
    vec[] vs = new vec[6];
    for (i = 0; i < nPointsPerRing; ++i) {
      pt pa = points0[i];
      vs[0] = V(pa, points0[(i-1+nPointsPerRing)%nPointsPerRing]);
      vs[1] = V(pa, points0[(i+1)%nPointsPerRing]);
      for (j = 0; j < nPointsPerRing; ++j) {
        pt pb = points1[j];
        vs[2] = V(pb, points1[(j-1+nPointsPerRing)%nPointsPerRing]);
        vs[3] = V(pb, points1[(j+1)%nPointsPerRing]);
        for (k = 0; k < nPointsPerRing; ++k) {
          pt pc = points2[k];
          vs[4] = V(pc, points2[(k-1+nPointsPerRing)%nPointsPerRing]);
          vs[5] = V(pc, points2[(k+1)%nPointsPerRing]);
          vec normal = N(pa, pb, pc);
          boolean isValid = true;
          for (vec v : vs) {
            if (dot(normal, v) > 0) {
              isValid = false;
              break;
            }
          }
          if (isValid) return new Triangle(i, j, k);
        }
      }
    }
    println("return null even using naive method");
    return null;
  }

  private int findStablePoint(pt[] points, int i, pt a, pt b, vec normal) {
    vec vn = normal;
    int d = dot(vn, V(points[i], points[(i + 1) % nPointsPerRing])) > 0 ? 1 : -1;
    int inext = (i + d + nPointsPerRing) % nPointsPerRing;
    int iprev = (i - d + nPointsPerRing) % nPointsPerRing;
    int steps1 = 0;
    while ((dot(vn, V(points[i], points[inext])) > 0 ||
            dot(vn, V(points[i], points[iprev])) > 0) &&
            (steps1 < maxIterOneRing)) {
      if (debug3RT &&
        debug3RTriInfo.numFaces == numFacesFastCH - 1 &&
        debug3RTriInfo.numSteps >= numStepsFastCH) break;
      iprev = i;
      i = inext;
      inext = (inext + d + nPointsPerRing) % nPointsPerRing;
      vn = N(points[i], a, b);
      if (debug3RT) {
        debug3RTriInfo.numSteps++;
      }
      steps1++;
    }
    normal.setTo(vn);  // normal will be updated
    return i;
  }

  private boolean findStableTriangleHS(pt[] points0, pt[] points1, pt[] points2,
                                       Triangle tri, vec normal) {
    int i = tri.a, j = tri.b, k = tri.c;
    boolean update = false;
    /* Find ring A/B/C's stable point respectively. */
    int inew = findStablePoint(points0, i, points1[j], points2[k], normal);
    if (inew != i) {
      i = inew;
      if (update == false) update = true;
    }
    int jnew = findStablePoint(points1, j, points2[k], points0[i], normal);
    if (jnew != j) {
      j = jnew;
      if (update == false) update = true;
    }
    int knew = findStablePoint(points2, k, points0[i], points1[j], normal);
    if (knew != k) {
      k = knew;
      if (update == false) update = true;
    }
    tri.set(inew, jnew, knew);
    return update;
  }

  /*
   * Generate a three-ring triangle given 3 rings using heuristic search.
   *
   * It may not converge when rings are large, rings have just a few points.
   *
   */
  private Triangle generateThreeRingTriangleHS(pt[] points0,
                                               pt[] points1,
                                               pt[] points2) {
    int i = 0, j = 0, k = 0;
    Triangle tri = new Triangle(i, j, k);
    vec normal = N(points0[i], points1[j], points2[k]);
    if (debug3RT) {
      debug3RTriInfo.idp0 = i;
      debug3RTriInfo.idp1 = j;
      debug3RTriInfo.idp2 = k;
      debug3RTriInfo.numSteps = 1;
    }
    int iter = 0;
    while (iter < maxIterThreeRings) {
      if (debug3RT &&
          debug3RTriInfo.numFaces == numFacesFastCH - 1 &&
          debug3RTriInfo.numSteps >= numStepsFastCH) break;
      boolean update = findStableTriangleHS(points0, points1, points2, tri, normal);
      if (update == false) break;  // break when stable
      iter++;
    }  // end while

    if (debug3RT) {
      debug3RTriInfo.idp0 = i;
      debug3RTriInfo.idp1 = j;
      debug3RTriInfo.idp2 = k;
    }

    if (iter < maxIterThreeRings) {
      return new Triangle(tri.a, tri.b, tri.c);
    } else {  // use backup method (could be naive or BFS)
      numBackup3RT++;
      //return generateThreeRingTriangleNaive(points0, points1, points2);
      return null;
    }
  }


  /*
   * Generate a three-ring triangle given 3 rings using BFS method with a hint,
   * i.e. an initial triangle.
   */
  private Triangle generateThreeRingTriangleBFSWithHint(pt[] points0,
                                                        pt[] points1,
                                                        pt[] points2,
                                                        Triangle tri) {
    pt[][] rings = new pt[3][];
    rings[0] = points0;
    rings[1] = points1;
    rings[2] = points2;
    TriangleNode triNode = new TriangleNode(tri);
    Queue<TriangleNode> queue = new LinkedList<TriangleNode>();
    queue.add(triNode);
    HashSet<Triangle> set = new HashSet<Triangle>();
    set.add(tri);
    boolean stable = triNode.computeChildren(rings, set);
    if (stable) return tri;
    while (queue.size() > 0) {
      TriangleNode node = queue.poll();
      ArrayList<TriangleNode> children = node.children;
      int nc = children.size();
      for (int i = 0; i < nc; ++i) {
        TriangleNode child = children.get(i);
        stable = child.computeChildren(rings, set);
        if (stable) {
          if (set.size() > nPointsPerRing * nPointsPerRing * nPointsPerRing) {
            println("size of explored set (bigger than np^3) = ", set.size());
          }
          return child.tri;
        }
        queue.add(child);
      }
    }
    println("cannot find stable three-ring triangle using BFS");  // this is possible!
    return null;
  }

  private Triangle generateThreeRingTriangleBFS(pt[] points0,
                                                pt[] points1,
                                                pt[] points2,
                                                int option) {
    Triangle tri = null;
    switch (option) {
      case 0:  // randomly generate an initial triangle
        tri = new Triangle(int(random(points0.length)),
                           int(random(points1.length)),
                           int(random(points2.length)));
        break;
      case 1:  // heuristics
        vec normal = N(points0[0], points1[0], points2[0]);
        tri = new Triangle(0, 0, 0);
        findStableTriangleHS(points0, points1, points2, tri, normal);
        break;
      default:
        tri = new Triangle(0, 0, 0);
        break;
    }
    return generateThreeRingTriangleBFSWithHint(points0, points1, points2, tri);
  }

  private void setupSplitLists() {
    splitLists = new ArrayList<ArrayList<Integer>>();
    for (int i = 0; i < nRings; ++i) {
      ArrayList<Integer> swingList = refConvexHull.swingLists.get(i);
      int nCorners = swingList.size();  // number of adjacent corners/triangles
      splitLists.add(new ArrayList<Integer>());
      for (int j = 0; j < nCorners; ++j) {
        int cid = swingList.get(j);
        int tid = cid / 3;  // triangle ID w.r.t. ref convex hull/set of three-ring triangles
        int pid = threeRingTriangles.get(tid).get(cid % 3);  // point ID (global)
        splitLists.get(i).add(pid);
      }
    }
  }

  private boolean cornerIntersectsCorner(pt a0, pt a1, pt a2, pt b0, pt b1, pt b2) {
    return edgeIntersectsTriangle(a0, a1, b0, b1, b2) ||
           edgeIntersectsTriangle(a0, a2, b0, b1, b2) ||
           edgeIntersectsTriangle(b0, b1, a0, a1, a2) ||
           edgeIntersectsTriangle(b0, b2, a0, a1, a2);
  }

  // TODO: current implementation may be optimized, especially triangle-triangle/edge intersection
  void fixPenetration3RT() {
    assert threeRingTriangles != null;
    setupSplitLists();
    for (int i = 0; i < nRings; ++i) {
      ArrayList<Integer> splits = splitLists.get(i);
      int ns = splits.size();
      ArrayList<Integer> swings = refConvexHull.swingLists.get(i);

      /* Pick a index to start. */
      int first = argmin(splits);  // index, [0, ns)
      int firstSplit = splits.get(first);  // point ID (global)
      HashMap<Integer, Integer> splitCount = new HashMap<Integer, Integer>();
      splitCount.put(firstSplit, 1);
      ArrayList<pt> cornerTriangles = new ArrayList<pt>();
      ArrayList<Integer> splitIdxs = new ArrayList<Integer>();

      /* Fix any issue around this index. */
      int cid0 = swings.get(first);
      int tid0 = cid0 / 3;
      Triangle tri0 = threeRingTriangles.get(tid0);
      int ia0 = tri0.get((cid0 % 3)), ib0 = tri0.get((cid0 + 1) % 3), ic0 = tri0.get((cid0 + 2) % 3);
      pt pa0 = getPoint(ia0), pb0 = getPoint(ib0), pc0 = getPoint(ic0);
      cornerTriangles.add(pa0);
      cornerTriangles.add(pb0);
      cornerTriangles.add(pc0);
      splitIdxs.add(first);

      int start = (first + 1) % ns;
      int end = (first + ns - 1) % ns;
      int count = 1;

      // if (debugFixPenetration) {
      //   pt tmp = getPoint(tri0.get(cid0 % 3));
      //   fill(red, 100);
      //   show(tmp, 5);
      // }

      while (count < ns) {  // search right, i.e. increment start pointer if possible
        int cid = swings.get(start);
        int tid = cid / 3;
        Triangle tri = threeRingTriangles.get(tid);
        int ia = tri.get(cid % 3), ib = tri.get((cid + 1) % 3), ic = tri.get((cid + 2) % 3);
        pt pa = getPoint(ia), pb = getPoint(ib), pc = getPoint(ic);
        int key = splits.get(start);
        //if (splits.get(start) == firstSplit) {
        if (splitCount.containsKey(key)) {
          splitCount.put(key, splitCount.get(key) + 1);
          cornerTriangles.add(pa);
          cornerTriangles.add(pb);
          cornerTriangles.add(pc);
          splitIdxs.add(start);
          start = (start + 1) % ns;
          count++;
          continue;
        }

        // if (edgeIntersectsTriangle(pa, pb, pa0, pb0, pc0) ||
        //     edgeIntersectsTriangle(pa, pc, pa0, pb0, pc0) ||
        //     edgeIntersectsTriangle(pa0, pb0, pa, pb, pc) ||
        //     edgeIntersectsTriangle(pa0, pc0, pa, pb, pc)) { // current triangle intersect first triangle
        //   splits.set(start, firstSplit);
        //   tri.set(cid % 3, firstSplit);
        //   start = (start + 1) % ns;
        //   count++;
        // } else break;
        int curSize = cornerTriangles.size();
        int j;
        for (j = curSize - 3; j >= 0; j -= 3) {  // the order may help improve performance a little bit
          pt pd = cornerTriangles.get(j);
          pt pe = cornerTriangles.get(j+1);
          pt pf = cornerTriangles.get(j+2);
          if (cornerIntersectsCorner(pa, pb, pc, pd, pe, pf)) break;
        }
        if (j >= 0) {  // intersection found!
          splitCount.put(key, splitCount.getOrDefault(key, 0) + 1);
          cornerTriangles.add(pa);
          cornerTriangles.add(pb);
          cornerTriangles.add(pc);
          splitIdxs.add(start);
          start = (start + 1) % ns;
          count++;
        } else {  // intersection not found!
          break;
        }
      }  // end searching right

      // if (debugFixPenetration) {
      //   int cid = swings.get(start);
      //   pt tmp = getPoint(threeRingTriangles.get(cid / 3).get(cid % 3));
      //   fill(green, 100);
      //   show(tmp, 5);
      // }

      while (count < ns) {  // search left, i.e. decrement end pointer if possible
        // if (splits.get(end) == firstSplit) {
        //   end = (end + ns - 1) % ns;
        //   count++;
        //   continue;
        // };
        // int cid = swings.get(end);
        // int tid = cid / 3;
        // Triangle tri = threeRingTriangles.get(tid);
        // int ia = tri.get(cid % 3), ib = tri.get((cid + 1) % 3), ic = tri.get((cid + 2) % 3);
        // pt pa = getPoint(ia), pb = getPoint(ib), pc = getPoint(ic);
        // if (edgeIntersectsTriangle(pa, pb, pa0, pb0, pc0) ||
        //     edgeIntersectsTriangle(pa, pc, pa0, pb0, pc0) ||
        //     edgeIntersectsTriangle(pa0, pb0, pa, pb, pc) ||
        //     edgeIntersectsTriangle(pa0, pc0, pa, pb, pc)) { // current triangle intersect first triangle
        //   splits.set(end, firstSplit);
        //   tri.set(cid % 3, firstSplit);
        //   end = (end + ns - 1) % ns;
        //   count++;
        // } else break;
        int cid = swings.get(end);
        int tid = cid / 3;
        Triangle tri = threeRingTriangles.get(tid);
        int ia = tri.get(cid % 3), ib = tri.get((cid + 1) % 3), ic = tri.get((cid + 2) % 3);
        pt pa = getPoint(ia), pb = getPoint(ib), pc = getPoint(ic);

        int key = splits.get(end);
        if (splitCount.containsKey(key)) {
          splitCount.put(key, splitCount.get(key) + 1);
          cornerTriangles.add(pa);
          cornerTriangles.add(pb);
          cornerTriangles.add(pc);
          splitIdxs.add(end);
          end = (end + ns - 1) % ns;
          count++;
          continue;
        }
        int curSize = cornerTriangles.size();
        int j;
        for (j = curSize - 3; j >= 0; j -= 3) {  // the order may help improve performance a little bit
          pt pd = cornerTriangles.get(j);
          pt pe = cornerTriangles.get(j+1);
          pt pf = cornerTriangles.get(j+2);
          if (cornerIntersectsCorner(pa, pb, pc, pd, pe, pf)) break;
        }
        if (j >= 0) {  // intersection found!
          splitCount.put(key, splitCount.getOrDefault(key, 0) + 1);
          cornerTriangles.add(pa);
          cornerTriangles.add(pb);
          cornerTriangles.add(pc);
          splitIdxs.add(end);
          end = (end + ns - 1) % ns;
          count++;
        } else {  // intersection not found!
          break;
        }
      }  // end searching left

      // if (debugFixPenetration) {
      //   int cid = swings.get(end);
      //   pt tmp = getPoint(threeRingTriangles.get(cid / 3).get(cid % 3));
      //   fill(blue, 100);
      //   show(tmp, 5);
      // }

      /* Fix the root. */
      int newSplit = firstSplit;  // make all corners/triangles touch newSplit
      int maxCount = splitCount.get(firstSplit);
      for (Integer k : splitCount.keySet()) {
        if (splitCount.get(k) > maxCount) {
          maxCount = splitCount.get(k);
          newSplit = k;
        }
      }
      for (int j = 0; j < splitIdxs.size(); ++j) {
        int idx = splitIdxs.get(j);
        int cid = swings.get(idx);
        int tid = cid / 3;
        int ccid = cid % 3;
        if (threeRingTriangles.get(tid).get(ccid) != newSplit) {
          splits.set(idx, newSplit);
          threeRingTriangles.get(tid).set(ccid, newSplit);
        }
      }


      /* Fix the rest. */
      int prevSplit = splits.get(start);
      start = (start + 1) % ns;
      int curSplit = splits.get(start);
      while (count < ns - 1) {
        if (curSplit < prevSplit) {
          splits.set(start, prevSplit);  // increase cur split to match prev split
          int cid = swings.get(start);
          threeRingTriangles.get(cid / 3).set(cid % 3, prevSplit);
        } else prevSplit = curSplit;
        start = (start + 1) % ns;
        curSplit = splits.get(start);
        count++;
      }

      // int second = (first + 1) % nSplits;
      // int third = (second + 1) % nSplits;
      // int s0 = splits.get(first);
      // int s1 = splits.get(second);
      // int s2 = splits.get(third);
      // int d1 = min(s1 - s0, s0 + nSplits - s1);
      // if (s2 < s1) {
      //   int d2 = min(s1 - s2, s2 + nSplits - s1);
      //   if (d1 < d2) {
      //     s1 = s0;  // decrease s1 to match s0
      //     splits.set(second, s1);
      //     int cid = refConvexHull.swingLists.get(i).get(second);
      //     threeRingTriangles.get(cid / 3).set(cid % 3, s1);
      //   }
      // }

      /* Check if the rest are good. If not, fix it. */
      // int last = first + nSplits;
      // int prev = s1;
      // for (int j = first + 2; j < last; ++j) {
      //   int k = j % nSplits;
      //   int cur = splits.get(k);
      //   if (cur < prev) {
      //     cur = prev;  // increase cur to match prev
      //     splits.set(k, cur);
      //     int cid = refConvexHull.swingLists.get(i).get(k);
      //     threeRingTriangles.get(cid / 3).set(cid % 3, cur);
      //   } else prev = cur;
      // }

    }
  }

  void generateThreeRingTriangles() {
    int nt = refConvexHull.nt;  // number of triangles of convex hull
    ArrayList<Triangle> threeRingTris = new ArrayList<Triangle>();
    debug3RTriInfo.numFaces = 0;
    for (int i = 0; i < nt; ++i) {
      if (debug3RT && i >= numFacesFastCH) break;
      Triangle face = refConvexHull.triangles.get(i);

      Triangle t = null;
      switch (method3RT) {
        case 0:
          t = generateThreeRingTriangleNaive(points[face.a], points[face.b], points[face.c]);
          break;
        case 1:
          t = generateThreeRingTriangleHS(points[face.a], points[face.b], points[face.c]);
          break;
        case 2:
          t = generateThreeRingTriangleBFS(points[face.a], points[face.b], points[face.c], 0);
          break;
        case 3:
          t = generateThreeRingTriangleBFS(points[face.a], points[face.b], points[face.c], 1);
          break;
        default:
          t = generateThreeRingTriangleNaive(points[face.a], points[face.b], points[face.c]);
          break;
      }
      Triangle triangle = (t == null) ?
                          null :
                          new Triangle(face.a * nPointsPerRing + t.a, face.b * nPointsPerRing + t.b, face.c * nPointsPerRing + t.c);
      threeRingTris.add(triangle);
      if (debug3RT) {
        debug3RTriInfo.idr0 = face.a;
        debug3RTriInfo.idr1 = face.b;
        debug3RTriInfo.idr2 = face.c;
        debug3RTriInfo.numFaces++;
      }
    }  // end for
    this.threeRingTriangles = threeRingTris;

    if (fixPenetration) {
      fixPenetration3RT();
    }
  }

  private void fillCorridor(int loA, int hiA, int loB, int hiB, int rA, int rB) {
    int i = loA, j = loB;
    pt pa = getPoint(loA), pb = getPoint(loB);
    int iBase = rA * nPointsPerRing, jBase = rB * nPointsPerRing;
    while(i != hiA || j != hiB) {
      pt pc = null, pd = null;
      int iNext = -1, jNext = -1;
      if (i != hiA) {  // increase i
        iNext = iBase + (i + 1) % nPointsPerRing;
        pc = getPoint(iNext);
      }
      if (j != hiB) {  // decrease j
        jNext = jBase + (j + nPointsPerRing - 1) % nPointsPerRing;
        pd = getPoint(jNext);
      }
      boolean moveA = true;
      if (pc != null && pd != null) {
        /* Select a good triangle based on what? */
        if (d(pa, pd) < d(pb, pc)) {
          twoRingTriangles.add(new Triangle(i, j, jNext));
          moveA = false;
        } else {
          twoRingTriangles.add(new Triangle(i, j, iNext));
        }
      } else if (pc != null) {
        twoRingTriangles.add(new Triangle(i, j, iNext));
      } else {  // pd != null
        twoRingTriangles.add(new Triangle(i, j, jNext));
        moveA = false;
      }
      if (moveA) i = iNext;
      else j = jNext;
    }
  }

  void generateTwoRingTriangles() {
    twoRingTriangles = new ArrayList<Triangle>();
    boolean[][] visited = new boolean[nRings][nRings];
    for (int i = 0; i < nRings; ++i) {  // i = ID of ring A
      if (debug2RT && i >= debug2RTriInfo.numGlobalStep) break;
      ArrayList<Integer> swings = refConvexHull.swingLists.get(i);
      int ns = swings.size();
      ArrayList<Integer> splits = splitLists.get(i);
      for (int j = 0, curC = swings.get(0); j < ns; ++j) {
        if (debug2RT && i == debug2RTriInfo.numGlobalStep - 1 && j >= debug2RTriInfo.numLocalStep) break;
        int swingC = swings.get((j+1) % ns);
        int prevC = prevCorner(curC);
        int nextSwingC = nextCorner(swingC);
        int ringB = refConvexHull.triangles.get(prevC / 3).get(prevC % 3);
        if (visited[i][ringB]) {
          curC = swingC;
          continue;
        }
        int loA = splits.get(j);
        int hiA = splits.get((j+1) % ns);
        int loB = threeRingTriangles.get(prevC / 3).get(prevC % 3);
        int hiB = threeRingTriangles.get(nextSwingC / 3).get(nextSwingC % 3);
        fillCorridor(loA, hiA, loB, hiB, i, ringB);
        curC = swingC;
        visited[i][ringB] = visited[ringB][i] = true;

        if (debug2RT && i == debug2RTriInfo.numGlobalStep - 1 && j == debug2RTriInfo.numLocalStep - 1) {
          debug2RTriInfo.pa0 = getPoint(loA);
          debug2RTriInfo.pa1 = getPoint(hiA);
          debug2RTriInfo.pb0 = getPoint(loB);
          debug2RTriInfo.pb1 = getPoint(hiB);
        }
      }
    }
  }

  private void generateTriangleMeshCH() {
    triangles = generateConvexHull(points, nRings, nPointsPerRing);
  }

  private void generateTriangleMeshFast() {
    generateThreeRingTriangles();
    if (showCorridors) generateTwoRingTriangles();
    else twoRingTriangles = null;
    triangles = new ArrayList<Triangle>();
    triangles.addAll(threeRingTriangles);
    if (twoRingTriangles != null) triangles.addAll(twoRingTriangles);
  }

  void generateTriangleMesh(int option) {
    switch (option) {
      case 0:
        generateTriangleMeshCH();
        break;
      case 1:
        generateTriangleMeshFast();
        break;
    }
  }

  void showRings() {
    noStroke();
    fill(orange);
    for (int i = 0; i < nRings; ++i) {
      show(centers[i], 1);
    }
    fill(green);
    for (int i = 0; i < nRings; ++i) {
      arrow(centers[i], V(centers[i], points[i][0]), 2);
    }
    fill(blue);
    for (int i = 0; i < nRings; ++i) {
      for (int j = 0; j < nPointsPerRing; ++j) {
        show(points[i][j], 2);
      }
    }
    fill(cyan);
    for (int i = 0; i < nRings; ++i) {
      for (int j = 0; j < nPointsPerRing; ++j) {
        collar(points[i][j], V(points[i][j], points[i][(j + 1) % nPointsPerRing]), 1, 1);
      }
    }
    return;
  }

  void showDebug3RTriInfo() {
    noStroke();
    fill(red, 150);
    show(contacts[debug3RTriInfo.idr0], 3);
    fill(green, 150);
    show(contacts[debug3RTriInfo.idr1], 3);
    fill(blue, 150);
    show(contacts[debug3RTriInfo.idr2], 3);
    fill(#BF6868, 200);  // light red
    show(points[debug3RTriInfo.idr0][debug3RTriInfo.idp0], 5);
    fill(#40935D, 200);  // light green
    show(points[debug3RTriInfo.idr1][debug3RTriInfo.idp1], 5);
    fill(#517EC9, 200);  // light blue
    show(points[debug3RTriInfo.idr2][debug3RTriInfo.idp2], 5);
  }

  void showDebug2RTriInfo() {
    fill(red, 200); show(debug2RTriInfo.pa0, 5);
    fill(yellow, 200); show(debug2RTriInfo.pa1, 5);
    fill(green, 100); show(debug2RTriInfo.pb0, 5);
    fill(blue, 100); show(debug2RTriInfo.pb1, 5);
    fill(#8B7373, 200); show(centers[debug2RTriInfo.numGlobalStep - 1], 5);  // center of current ring
  }

  void saveRings(String file) {
    String[] lines = new String[2 + 3 * nRings];
    int i = 0;
    lines[i++] = str(nRings);
    lines[i++] = str(nPointsPerRing);
    for (int j = 0; j < nRings; ++j) {
      lines[i++] = str(contacts[j].x) + "," + str(contacts[j].y) + "," +
                   str(contacts[j].z);
      lines[i++] = str(radii[j]);
      lines[i++] = str(initDirs[j].x) + "," + str(initDirs[j].y) + "," +
                   str(initDirs[j].z);
    }
    saveStrings(file, lines);
    return;
  }

  void loadRings(String file) {
    String[] lines = loadStrings(file);
    int i = 0;
    nRings = int(lines[i++]);
    nPointsPerRing = int(lines[i++]);
    println("loading:", file, "nc =", nRings, "np =", nPointsPerRing);
    contacts = new pt[nRings];
    radii = new float[nRings];
    initDirs = new vec[nRings];
    for (int j = 0; j < nRings; ++j) {
      float[] contact = float(split(lines[i++], ","));
      contacts[j] = new pt(contact[0], contact[1], contact[2]);
      radii[j] = float(lines[i++]);
      float[] initDir = float(split(lines[i++], ","));
      initDirs[j] = new vec(initDir[0], initDir[1], initDir[2]);
    }
    return;
  }

  boolean isValid() {
    for (int i = 0; i < nRings; ++i) {
      vec normal0 = U(c, contacts[i]);
      float alpha0 = asin(clamp(radii[i]/r, -1.0, 1.0));
      for (int j = i + 1; j < nRings; ++j) {
        vec normal1 = U(c, contacts[j]);
        float alpha1 = asin(clamp(radii[j]/r, -1.0, 1.0));
        float theta = acos(clamp(dot(normal0, normal1), -1.0, 1.0));
        // println("theta = ", theta, "dot of normal0 and normal1 = ", dot(normal0, normal1));
        if (theta <= alpha0 + alpha1) return false;
      }
    }
    return true;
  }
}